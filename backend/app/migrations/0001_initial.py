# Generated by Django 5.2.3 on 2025-07-28 18:30

import app.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('seq', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='No.')),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Active'), (3, 'Closed')], default=1, verbose_name='State')),
                ('date', models.DateField(verbose_name='Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ('seq',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', app.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(verbose_name='Order')),
                ('answer', models.PositiveSmallIntegerField(verbose_name='Answer')),
                ('content', models.TextField(blank=True, default='', null=True, verbose_name='Content')),
                ('image', models.FileField(blank=True, null=True, upload_to=app.models.get_quiz_image_path, verbose_name='Image')),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Active'), (3, 'Reviewing'), (4, 'Closed')], default=1, verbose_name='State')),
                ('note', models.TextField(blank=True, default='', null=True, verbose_name='Note')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='app.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
                'ordering': ('lesson', 'order'),
                'unique_together': {('lesson', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(verbose_name='Order')),
                ('content', models.TextField(blank=True, default='', null=True, verbose_name='Content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='app.quiz', verbose_name='Quiz')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
                'ordering': ('quiz', 'order'),
                'unique_together': {('quiz', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personal_sid', models.CharField(default='', max_length=20, unique=True, verbose_name='Student ID')),
                ('personal_name', models.CharField(db_index=True, default='', max_length=40, verbose_name='Name')),
                ('role_department', models.CharField(blank=True, default='', max_length=40, null=True, verbose_name='Department')),
                ('role_major', models.CharField(blank=True, default='', max_length=40, null=True, verbose_name='Major')),
                ('role_year', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Year')),
                ('course_is_retake', models.BooleanField(default=False, verbose_name='Retake')),
                ('course_is_dropout', models.BooleanField(default=False, verbose_name='Dropout')),
                ('eval_project1', models.PositiveSmallIntegerField(default=0, verbose_name='Project 1 Score')),
                ('eval_project2', models.PositiveSmallIntegerField(default=0, verbose_name='Project 2 Score')),
                ('eval_project3', models.PositiveSmallIntegerField(default=0, verbose_name='Project 3 Score')),
                ('eval_midterm', models.PositiveSmallIntegerField(default=0, verbose_name='Midterm Score')),
                ('eval_finals', models.PositiveSmallIntegerField(default=0, verbose_name='Finals Score')),
                ('eval_quiz', models.PositiveSmallIntegerField(default=0, verbose_name='Quiz Score')),
                ('extra_note', models.TextField(blank=True, default='', null=True, verbose_name='Note')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='app.option', verbose_name='Option')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='app.quiz', verbose_name='Quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Response',
                'verbose_name_plural': 'Responses',
                'ordering': ('-created_at',),
                'unique_together': {('user', 'quiz')},
            },
        ),
    ]
