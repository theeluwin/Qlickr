services:
  db:
    image: postgres:16-alpine
    container_name: qlickr-prod-db-container
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/shared/dbfiles:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 3s
      timeout: 30s
      retries: 10
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  bouncer:
    image: edoburu/pgbouncer:latest
    container_name: qlickr-prod-bouncer-container
    env_file:
      - ${PWD}/.env.prod
    environment:
      VERBOSE: "0"
      LOG_CONNECTIONS: "0"
      LOG_DISCONNECTIONS: "0"
      STATS_PERIOD: "0"
      DB_HOST: db
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 2000
      DEFAULT_POOL_SIZE: 100
      RESERVE_POOL_SIZE: 20
      IGNORE_STARTUP_PARAMETERS: extra_float_digits
      AUTH_TYPE: scram-sha-256
      AUTH_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-h", "db"]
      interval: 3s
      timeout: 30s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
    networks:
      - qlickr-prod-network
  redis:
    image: redis:7-alpine
    container_name: qlickr-prod-redis-container
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/shared/redisfiles:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 30s
      retries: 10
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  celery:
    image: qlickr-prod-backend:celery
    container_name: qlickr-prod-celery-container
    build:
      context: ${PWD}/backend
      dockerfile: Dockerfile.prod
    command: ./scripts/entry.celery.sh
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/shared/logfiles:/shared/logfiles
      - qlickr-prod-celery-venv:/app/.venv
    healthcheck:
      test: ["CMD", "./scripts/health.celery.sh"]
      interval: 3s
      timeout: 30s
      retries: 10
    depends_on:
      bouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  flower:
    image: qlickr-prod-backend:flower
    container_name: qlickr-prod-flower-container
    build:
      context: ${PWD}/backend
      dockerfile: Dockerfile.prod
    command: ./scripts/entry.flower.sh
    env_file:
      - ${PWD}/.env.prod
    ports:
      - 5555:5555
    volumes:
      - ${PWD}/shared/logfiles:/shared/logfiles
      - qlickr-prod-flower-venv:/app/.venv
    depends_on:
      celery:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  backend-api:
    image: qlickr-prod-backend:api
    container_name: qlickr-prod-backend-container
    build:
      context: ${PWD}/backend
      dockerfile: Dockerfile.prod
    command: ./scripts/entry.api.prod.sh
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/shared/staticfiles:/shared/staticfiles
      - ${PWD}/shared/mediafiles:/shared/mediafiles
      - ${PWD}/shared/logfiles:/shared/logfiles
      - qlickr-prod-backend-api-venv:/app/.venv
    healthcheck:
      test: ["CMD", "./scripts/health.api.sh"]
      interval: 3s
      timeout: 30s
      retries: 10
    depends_on:
      celery:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  backend-ws:
    image: qlickr-prod-backend:ws
    container_name: qlickr-prod-backend-ws-container
    build:
      context: ${PWD}/backend
      dockerfile: Dockerfile.dev
    command: ./scripts/entry.ws.prod.sh
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/backend:/app
      - ${PWD}/shared/staticfiles:/shared/staticfiles
      - ${PWD}/shared/mediafiles:/shared/mediafiles
      - ${PWD}/shared/logfiles:/shared/logfiles
      - qlickr-prod-backend-ws-venv:/app/.venv
    healthcheck:
      test: ["CMD", "./scripts/health.ws.sh"]
      interval: 3s
      timeout: 30s
      retries: 10
    depends_on:
      bouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qlickr-prod-network
  frontend:
    image: qlickr-prod-frontend
    container_name: qlickr-prod-frontend-container
    build:
      context: ${PWD}/frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_SITE_TITLE: ${VITE_SITE_TITLE}
        VITE_LOCALE: ${VITE_LOCALE}
    env_file:
      - ${PWD}/.env.prod
    volumes:
      - ${PWD}/shared/logfiles:/shared/logfiles
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 3s
      timeout: 30s
      retries: 10
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  nginx:
    image: nginx:1.28-alpine-slim
    container_name: qlickr-prod-nginx-container
    env_file:
      - ${PWD}/.env.prod
    ports:
      - 80:80
    volumes:
      - ${PWD}/confs/prod.conf:/etc/nginx/conf.d/default.conf
      - ${PWD}/shared/staticfiles:/shared/staticfiles
      - ${PWD}/shared/mediafiles:/shared/mediafiles
      - ${PWD}/shared/logfiles:/shared/logfiles
      - ${PWD}/shared/certfiles/conf:/etc/letsencrypt
      - ${PWD}/shared/certfiles/www:/var/www/certbot
    depends_on:
      backend-api:
        condition: service_healthy
      backend-ws:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qlickr-prod-network
  certbot:
    image: certbot/certbot:latest
    container_name: qlickr-prod-certbot-container
    volumes:
      - ${PWD}/shared/certfiles/conf:/etc/letsencrypt
      - ${PWD}/shared/certfiles/www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - qlickr-prod-network
networks:
  qlickr-prod-network:
    driver: bridge
volumes:
  qlickr-prod-celery-venv:
  qlickr-prod-flower-venv:
  qlickr-prod-backend-api-venv:
  qlickr-prod-backend-ws-venv:
